// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}
 

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int? 
    github_accounts          GitHubAccount[] 

    @@unique([provider, providerAccountId])
}

model GitHubAccount {
    id                      String @id @default(cuid()) 
    login                   String
    public_repos            Int
    private_repos           Int
    avatar_url              String
    github_token            String
    accountId               String
    account                 Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
    repos                   GitHubRepo[] 
}

model GitHubRepo {
    id                      String @id @default(cuid()) 
    githubId                String
    name                    String
    full_name               String
    private                 Boolean
    description             String
    fork                    Boolean
    url                     String 
    git_url                 String
    ssh_url                 String
    clone_url               String
    svn_url                 String
    homepage                String
    size                    Int
    stargazers_count        Int
    watchers_count          Int 
    
    repo_inspected          Boolean @default(false)

    accountId               String
    account                 GitHubAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)  
    starred                 Boolean  @default(false)
}


model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[] 
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
