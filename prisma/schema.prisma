 
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql" 
    url      = env("DATABASE_URL")
}
 

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int? 
    github_accounts          GitHubAccount[] 

    @@unique([provider, providerAccountId])
}

model GitHubAccount {
    id                      String @id @default(cuid()) 
    login                   String
    public_repos            Int
    private_repos           Int
    avatar_url              String
    github_token            String
    accountId               String
    account                 Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
    repos                   GitHubRepo[] 
}

model GitHubRepo {
    id                      String @id @default(cuid()) 
    githubId                String
    name                    String
    full_name               String
    private                 Boolean
    description             String
    fork                    Boolean
    url                     String 
    git_url                 String
    ssh_url                 String
    clone_url               String
    svn_url                 String
    homepage                String
    size                    Int
    stargazers_count        Int
    watchers_count          Int 
    
    repo_inspected          Boolean @default(false)

    accountId               String
    account                 GitHubAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)  
    starred                 Boolean  @default(false)

    pullRequests            GitHubPullRequest[]  

}

model GitHubPullRequest {
    id                          String @id @default(cuid())
    githubId                    String
    number                      Int
    state                       String
    title                       String
    diff_url                    String
    html_url                    String
    issues_url                  String
    created_at                  DateTime
    updated_at                  DateTime
    commits_url                 String
    review_comments_url         String
    review_comment_url          String
    comments_url                String
    statuses_url                String
        
    githunRepoId                String
    githubRepo                  GitHubRepo @relation(fields: [githunRepoId], references: [id], onDelete: Cascade)
        
    ig_chat_id                  String   
    ig_chat_history             IGChatHistory? 
    instructions_pull_request   InstructionsPullRequest?    
}


model InstructionsPullRequest {
    id                      String @id @default(cuid()) 
    instructions            String[]
    githubPullRequestId     String @unique
    githubPullRequest       GitHubPullRequest @relation(fields: [githubPullRequestId], references: [id])
}

model IGChatHistory {
    id                     String @id @default(cuid())  
    chatName               String  
    chatMessages           IGChatMessage[] 
    pullRequestUpdated     DateTime // Use this to track when the pull request was last updated and re initiate the chat if it is too old  
    githubPullRequestId    String @unique
    githubPullRequest      GitHubPullRequest @relation(fields: [githubPullRequestId], references: [id])
}

model IGChatMessage {
    id                     String @id @default(cuid())
    message                String
    sender                 String
    timestamp              DateTime
    chatId                 String
    chat                   IGChatHistory @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[] 
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
